swagger: '2.0'
info:
  version: 1.0.0
  title: Chillout API
  description: An API to manage the entities in the chillout
host: localhost:8081
basePath: /api
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /products:
    post:
      description: create a product
      operationId: createProduct
      consumes:
        - application/json
      parameters:
        - name: product
          in: body
          required: true
          schema:
            $ref: '#/definitions/ProductInput'
      responses:
        '201':
          description: created
          schema:
            type: object
        400:
          description: Payload malformatted
          schema:
            type: object
    get:
      description: get the list of all products
      operationId: getProducts
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductOutput'
  /products/{id}:
    patch:
      security:
        - Bearer: []
      tags:
        - "product"
      summary: "Updates the ressource"
      operationId: "updateProduct"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          type: integer
          format: int64
          required: true
          name: id
          description: The email of the Product
        - in: body
          name: fields
          description: The fields to update
          schema:
            type: object
            properties:
              name:
                type: string
              unitPrice:
                type: string
              description:
                type: string
      responses:
        200:
          description: Description of Product
          schema:
            $ref: '#/definitions/ProductOutput'
        401:
          description: Unauthorized
          schema:
            type: object
        400:
          description: Payload malformatted
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        404:
          description: Not found
          schema:
            type: object
    delete:
      security:
        - Bearer: []
      tags:
        - "product"
      summary: "Deletes the ressource"
      operationId: "deleteProductById"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          type: integer
          format: int64
          required: true
          name: id
          description: The id of the Product
      responses:
        200:
          description: Deleted ressource
          schema:
            type: object
        400:
          description: Payload malformatted
          schema:
            type: object
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        404:
          description: Not found
          schema:
            type: object
    get:
      security:
        - Bearer: []
      tags:
        - "product"
      summary: "Get the ressource"
      operationId: "getProductById"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          type: integer
          format: int64
          required: true
          name: id
          description: The email of the Product
      responses:
        200:
          description: Description of Product
          schema:
            $ref: '#/definitions/ProductOutput'
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        404:
          description: Not found
          schema:
            type: object
  /clients:
    post:
    get:
  /clients/{email}:
    get:
    patch:
    delete:
  /orders:
    get:
      description: get the list of all orders
      operationId: getOrders
      produces:
        - application/json
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        404:
          description: Not found
          schema:
            type: object
  /orders/{id}:
    get:
    patch:
    delete:
definitions:
  Client:
    type: object
    properties:
      email:
        type: string
      address:
        type: string
  Product:
    type: object
    properties:
      name:
        type: string
      unitPrice:
        type: number
        format: double
      description:
        type: string
  ProductInput:
    allOf:
      - $ref: '#/definitions/Product'
      - type: object
  ProductOutput:
    allOf:
      - $ref: '#/definitions/Product'
      - type: object
      - properties:
          id:
            type: integer
            format: int64
  OrderItem:
    type: object
    properties:
      id:
        type: integer
        format: int64
      product:
        $ref: '#/definitions/Product'
      quantity:
        type: integer
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      client:
        $ref: '#/definitions/Client'
      orderItems:
        type: array
        items:
          $ref: '#/definitions/OrderItem'